@typeparam TItem

<table class="table is-fullwidth">
    <thead>
        <tr>
            @if(Columns == null || Columns.Count <=0)
            {
                //create header with reflection
            }
            else
            {
                //Create header based on column definitions.
                foreach(var column in Columns)
                {
                                    
                    if(column.Alignment != Alignment.NotSet)
                    {
                        switch(column.Alignment)
                        {
                            case Alignment.Left:
                                <th class="align-left">@column.Caption</th>
                                break;
                            case Alignment.Right:
                                <th class="align-right">@column.Caption</th>
                                break;
                            case Alignment.Center:
                                <th class="align-center">@column.Caption</th>
                                break;
                            case Alignment.NotSet:
                            default:
                                 <th>@column.Caption</th>
                                break;
                        }
                        @*<th align="@column.Alignment.ToString().ToLower()">@column.Caption</th>  *@                 
                    }
                    else
                    {
                         <th> @column.Caption </th>             
                    }                                
                }

            }

        </tr>
    </thead>
    <tbody>
        @foreach(TItem item in DataItems)
        {
            <tr>
                @foreach (var col in Columns)
                {
                    string rawValue = typeof(TItem).GetProperty(col.DataField).GetValue(item).ToString();

                    // if the format is set
                    @if (!string.IsNullOrWhiteSpace(col.Format) && col.DataType != DataType.NotSet)
                    {

                        string value = string.Empty;

                        switch (col.DataType)
                        {
                            case DataType.Date:
                            case DataType.DateTime:
                                DateTime dtValue = DateTime.Parse(rawValue);
                                value = dtValue.ToString(col.Format);
                                break;
                            case DataType.Boolean:
                                Boolean bValue = bool.Parse(rawValue);
                                value = bValue.ToString();
                                break;
                            case DataType.Currency:
                                double dValue = double.Parse(rawValue);
                                value = Math.Round(dValue, 2).ToString("c");
                                break;
                            default:
                                break;
                        }

                        if (col.Alignment != Alignment.NotSet)
                        {
                            <td align="@col.Alignment.ToString().ToLower()">@value</td>
                        }
                        else
                        {
                            <td> @value  </td>
                        }
                    }
                    else  // if there is no format
                    {
                        if (col.Alignment != Alignment.NotSet)
                        {
                            <td align="@col.Alignment.ToString().ToLower()">@rawValue</td>
                        }
                        else
                        {
                            <td> @rawValue  </td>
                        }
                    }
                }
            </tr>
        }


    </tbody>

</table>




@code {

    [Parameter]
    public List<TItem> DataItems{ get; set; }


    [Parameter]
    public List<ColumnDefinition> Columns{ get; set; }

}




