@typeparam TItem

<table class="table is-fullwidth">
    <thead>
        <tr>
            @if(Columns == null || Columns.Count <=0)
            {
                
            }
            else
            {
                //Create header based on column definitions with reflection.
                foreach(var column in Columns)
                {
                                    
                    if(column.Alignment != Alignment.NotSet)
                    {
                        switch(column.Alignment)
                        {
                            case Alignment.Left:
                                <th @onclick="@( ()=> SortData(column) )" class="align-left">
                                    @column.Caption 
                                    <span style="float:right" class="@( SortClass(column) )"></span> 
                                </th>
                            break;
                            case Alignment.Right:
                                <th @onclick="@( ()=> SortData(column) )" class="align-right">
                                    @column.Caption 
                                    <span style="float:right" class="@( SortClass(column) )"></span> 
                                </th>
                            break;
                            case Alignment.Center:
                                <th @onclick="@( ()=> SortData(column) )" class="align-center">
                                    @column.Caption 
                                    <span style="float:right" class="@( SortClass(column) )"></span> 
                                </th>
                            break;
                            case Alignment.NotSet:
                            default:
                                 <th @onclick="@( ()=> SortData(column) )">
                                     @column.Caption 
                                     <span style="float:right" class="@( SortClass(column) )"></span> 
                                 </th>
                            break;
                        }
                        @*<th align="@column.Alignment.ToString().ToLower()">@column.Caption</th>  *@                 
                    }
                    else
                    {
                         <th @onclick="@( ()=> SortData(column) )"> 

                             @column.Caption 

                             <span style="float:right" class="@( SortClass(column) )"></span>
                         </th>             
                    }                                
                }

            }

        </tr>
    </thead>
    <tbody>
        @foreach(TItem item in DataItems.
                              Skip(Paging.NumOfItemsToSkip(CurrentPageNumber) )
                              .Take(Paging.NumOfItemsToTake(DataItems.Count) )   
                 )
        {
            <tr>
                @foreach (var col in Columns)
                {
                    string rawValue = typeof(TItem).GetProperty(col.DataField).GetValue(item).ToString();

                    // if the format is set
                    @if (!string.IsNullOrWhiteSpace(col.Format) && col.DataType != DataType.NotSet)
                    {

                        string value = string.Empty;

                        switch (col.DataType)
                        {
                            case DataType.Date:
                            case DataType.DateTime:
                                DateTime dtValue = DateTime.Parse(rawValue);
                                value = dtValue.ToString(col.Format);
                                break;
                            case DataType.Boolean:
                                Boolean bValue = bool.Parse(rawValue);
                                value = bValue.ToString();
                                break;
                            case DataType.Currency:
                                double dValue = double.Parse(rawValue);
                                value = Math.Round(dValue, 2).ToString("c");
                                break;
                            default:
                                break;
                        }

                        if (col.Alignment != Alignment.NotSet)
                        {
                            <td align="@col.Alignment.ToString().ToLower()">@value</td>
                        }
                        else
                        {
                            <td> @value  </td>
                        }
                    }
                    else  // if there is no format
                    {
                        if (col.Alignment != Alignment.NotSet)
                        {
                            <td align="@col.Alignment.ToString().ToLower()">@rawValue</td>
                        }
                        else
                        {
                            <td> @rawValue  </td>
                        }
                    }
                }
            </tr>
        }
    </tbody>

</table>

<div class="level">
    <div class="level-left"> </div>
    <div class="level-right">
        <div class="level-item">
            @if(Paging != null && Paging.Enabled)
            {
                    @if(Paging.CustomPager)
                    {
                        @CustomPager
                    }
                    else
                    {
                        <span style="font-size:14px; cursor:pointer" @onclick="GoToPrevPage"> <b> &lt; Previous  </b>  </span>

                        <button class="button"@onclick="GoToPrevPage">Previous</button>

                        <span> &nbsp;&nbsp;  Page @CurrentPageNumber  of @Paging.MaxPageNumber &nbsp;&nbsp; </span>

                        <button class="button"@onclick="GoToNextPage">Next</button>

                        <span style="font-size:14px; cursor:pointer" @onclick="GoToNextPage"> <b> Previous  &gt; </b>  </span>

                    }
            }
        </div>
    </div>
</div>




@code {
    [Parameter]
    public int CurrentPageNumber { get; set; } = 1;



    [Parameter]
    public PagingConfig Paging { get;  set; }

    [Parameter]
    public List<TItem> DataItems{get;set;}


    [Parameter]
    public List<ColumnDefinition> Columns{ get; set; }



    [Parameter]
    public RenderFragment CustomPager { get; set; }



    protected override void OnInitialized()
    {
        base.OnInitialized();

        Initilize();
    }

    private void Initilize()
    { 
        this.Paging = new PagingConfig(this.DataItems.Count,5,true, true);     
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SortData();
    }




    public void GoToPrevPage()
    {
        CurrentPageNumber = Paging.PrevPageNumber(CurrentPageNumber);
    }

    public void GoToNextPage()
    {
        CurrentPageNumber = Paging.NextPageNumber(CurrentPageNumber);
    }
    public int DGMaxPageNumber
    {
        get => Paging.MaxPageNumber;
    }


    private string SortClass(ColumnDefinition column)
    {
        if(column.SortDirection != SortDirection.NotSet)
        {
            return $"sort {column.SortDirection.ToString().ToLower()}";
        }
        return "no-sort";
    }

    private void SortData(ColumnDefinition sortByColumn = null)
    {
        if(sortByColumn == null)
        {
            sortByColumn = Columns.FirstOrDefault(x => x.SortDirection != SortDirection.NotSet);
            if (sortByColumn == null)
            {
                return;
            }
        }

        foreach (var col in Columns)
        {
            if(col.DataField != sortByColumn.DataField)
            {
                col.SortDirection = SortDirection.NotSet;
            }
        }

        switch(sortByColumn.SortDirection)
        {
            case SortDirection.NotSet:
                sortByColumn.SortDirection = SortDirection.Asc;
                break;
            case SortDirection.Asc:
                sortByColumn.SortDirection = SortDirection.Desc;
                break;
            case SortDirection.Desc:
                sortByColumn.SortDirection = SortDirection.Asc;
                break;
            default:
                sortByColumn.SortDirection = SortDirection.Asc;
                break;
        }

        if(sortByColumn.SortDirection == SortDirection.Asc)
        {
            DataItems.Sort( 
                (x,y) => typeof(TItem)
                .GetProperty(sortByColumn.DataField).GetValue(x).ToString()
                .CompareTo(
                    typeof(TItem)
                    .GetProperty(sortByColumn.DataField).GetValue(y).ToString()
                )   
            );
        }
        else
        {
            DataItems.Sort( 
                (x,y) => typeof(TItem)
                .GetProperty(sortByColumn.DataField).GetValue(y).ToString()
                .CompareTo(
                    typeof(TItem)
                    .GetProperty(sortByColumn.DataField).GetValue(x).ToString()
                )   
            );

        }


    }


}




