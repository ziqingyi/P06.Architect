@page "/"
@page "/StateManagement"



@inject CounterStore counterStore
@inject CounterStoreWithDispatcher counterStoreWithDispatcher
@inject IActionDispatcher actionDispatcher

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<br />
<br />


<p>  Current Count: @currentCount   </p>

<p>  Counter Store: @counterStore.GetState().Count   </p>

<p>  Counter Store WithDispatcher: @counterStoreWithDispatcher.GetState().Count   </p>


@code {
    private int currentCount = 0;


    protected override void OnInitialized()
    {
        base.OnInitialized();


        //get notified and refreshed when the stores have changes
        counterStore.AddStateChangeListeners(UpdateView);
        counterStoreWithDispatcher.AddStateChangeListeners(UpdateView);

    }


    private void IncrementCount()
    {
        currentCount++;

        //notify counterStore directly
        counterStore.IncrementCount();


        //do not use countStore method directly, 
        //use dispatcher to dispatch actions to all instance registerrd. 
        actionDispatcher.Dispatch(new IncrementAction());

    }



    //fix memory leaking. remove ref from teh counter store, let the StateManagement component being disposed. 
    public void Dispose()
    {
        counterStore.RemoveStateChangeListeners(UpdateView);

        counterStoreWithDispatcher.RemoveStateChangeListeners(UpdateView);
    }


    private void UpdateView()
    {
        StateHasChanged();
    }
}
